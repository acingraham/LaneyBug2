{"version":3,"sources":["GoogleAuthProvider.js","App.js","reportWebVitals.js","index.js"],"names":["GoogleAuthContext","React","createContext","GoogleAuthProvider","children","googleAuth","useGoogleLogin","clientId","Provider","value","useGoogleAuth","useContext","API_ENDPOINT","VIEW_ENDPOINT","GROUP_ENDPOINT","Player","list","useState","selectedIndex","setSelectedIndex","rand","count","set","Set","size","length","randomIndex","Math","floor","random","add","Array","from","getRandom","items","setItems","onError","err","url","type","newItems","index","indexOf","splice","recordView","groupId","userId","email","console","log","fetch","headers","method","mode","body","JSON","stringify","then","res","json","data","catch","useRecordView","isInitialized","isSignedIn","signIn","signOut","googleUser","className","onChange","showThumbs","useKeyboardArrows","showStatus","autoFocus","slice","map","onClick","MyPlayer","playing","useEffect","profileObj","controls","loop","height","width","useS3","group","Admin","setIndex","addToMain","addToSkip","addToOther","videoList","setVideoList","a","response","videoListJson","fetchData","main","prev","skip","back","other","onKeyPress","event","key","View","file","previouslyViewed","previouslyViewedJson","previouslyViewedJsonSet","filter","vid","has","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fce442c.chunk.js","sourcesContent":["import React from 'react';\nimport { useGoogleLogin } from 'react-use-googlelogin';\n\nconst GoogleAuthContext = React.createContext();\n\nexport const GoogleAuthProvider = ({ children }) => {\n  const googleAuth = useGoogleLogin({\n    clientId: '934914015863-16l8d98h298c138eqca115cf2l587k3a.apps.googleusercontent.com' // process.env.GOOGLE_CLIENT_ID, // Your clientID from Google.\n  });\n\n  return (\n    <GoogleAuthContext.Provider value={googleAuth}>\n      {/* The rest of your app */}\n      {children}\n    </GoogleAuthContext.Provider>\n  );\n};\n\nexport const useGoogleAuth = () => React.useContext(GoogleAuthContext);\n","import { useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { Carousel } from 'react-responsive-carousel';\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport { useGoogleAuth } from './GoogleAuthProvider';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\nimport './App.css';\n\n// TODO - Move these calls to a service\n// const API_ENDPOINT = 'https://xrkgyvv5tk.execute-api.us-east-1.amazonaws.com/prod/petcuddleotron';\nconst API_ENDPOINT = 'https://xrkgyvv5tk.execute-api.us-east-1.amazonaws.com/prod';\nconst VIEW_ENDPOINT = `${API_ENDPOINT}/view`;\nconst FAVORITE_ENDPOINT = `${API_ENDPOINT}/favorite`;\nconst GROUP_ENDPOINT = `${API_ENDPOINT}/group`;\n\nfunction getRandom(list, count) {\n  const set = new Set();\n  while (set.size < count && count < list.length) {\n    const randomIndex = Math.floor(Math.random() * list.length);\n    set.add(list[randomIndex]);\n  }\n  return Array.from(set);\n}\n\nfunction useRecordView(groupId, userId) {\n  // TODO - Might want to rename this s3ObjectName throughout the code\n  return function(url, email) {\n    // TODO - Have this trigger the actual request. Consider adding error logging if it's unable to save for some reason.\n    console.log('recording view of', groupId, userId, url, email);\n    fetch(VIEW_ENDPOINT, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: 'PUT',\n      mode: 'cors',\n      body: JSON.stringify({\n        groupId,\n        userId: email,\n        // TODO - Should rename url to something else\n        url,\n      })\n    })\n      .then(res => res.json())\n      .then(data => console.log('SUCCESS', data))\n      .catch(err => console.log('ERROR', err));\n\n  };\n}\n\nfunction useRecordFavorite(groupId, userId) {\n  return function(url, isFavorite) {\n    // TODO - Have this trigger the actual request. Consider adding error logging if it's unable to save for some reason.\n    console.log('recording favorite of', groupId, userId, url, isFavorite);\n    // TODO - Switch to await / async\n    fetch(FAVORITE_ENDPOINT, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: 'PUT',\n      mode: 'cors',\n      body: JSON.stringify({\n        groupId,\n        userId,\n        // TODO - Should rename url to something else\n        url,\n        isFavorite,\n      })\n    })\n      .then(res => res.json())\n      .then(data => console.log('SUCCESS', data))\n      .catch(err => console.log('ERROR', err));\n\n  };\n}\n\n// TODO - I think this should be pushed down the component hierarchy. Reread Dan Abramov's blogpost about this. Seems odd to have the Player return a carousel of ReactPlayers.\nfunction Player({list}) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  // TODO - Handle bad urls better\n  const rand = getRandom(list, 20);\n  const [items, setItems] = useState(rand);\n\n  // TODO - This logic should be at the Carousel level. Should see if it has a prop or functionality to handle this case\n  const onError = (err, url) => {\n    if (err.type === 'error') {\n      setItems(items => {\n        const newItems = [...items];\n        const index = newItems.indexOf(url);\n        newItems.splice(index, 1);\n        return newItems;\n      });\n    }\n  };\n\n  // TODO - Shouldn't be hardcoding this\n  const groupId = 'laney';\n  // TODO - Should isolate the mapping of url to group somewhere. Can get this group from the router route.\n  const userId = 'andrew';\n  const recordView = useRecordView(groupId, userId);\n  const data = useGoogleAuth();\n  const {isInitialized, isSignedIn, signIn, signOut, googleUser} = data;\n\n  console.log('data', data);\n\n  return (\n    <div className=\"App\">\n      <Carousel onChange={setSelectedIndex} showThumbs={false} useKeyboardArrows showStatus={false} autoFocus>\n        {items.slice(0, 10).map((url, index) => (\n          <div key={url} className=\"login-wrapper\">\n            {isInitialized && isSignedIn && <button onClick={signOut}>Log Out</button>}\n            {isInitialized && !isSignedIn && <button onClick={signIn}>Log In</button>}\n            <MyPlayer isSignedIn={isSignedIn} url={url} playing={index === selectedIndex} onError={onError} recordView={recordView} googleUser={googleUser}/>\n          </div>\n        ))}\n      </Carousel>\n    </div>\n  );\n}\n\nfunction MyPlayer({url, playing, onError, recordView, googleUser, isSignedIn}) {\n  useEffect(() => {\n    if (playing && isSignedIn) {\n      recordView(url, googleUser.profileObj.email);\n    }\n  }, [playing, isSignedIn]);\n\n  return (\n    <ReactPlayer\n      url={`https://laneybug.s3.amazonaws.com/videos/${url}`}\n      controls\n      loop\n      height=\"auto\"\n      width=\"auto\"\n      playing={playing}\n      onError={err => onError(err, url)}\n    />\n  );\n}\n\nfunction Favorite(url) {\n  // TODO - This should be a toggle\n  const favorite = (url) => {\n\n  };\n\n  const [isFavorite, setIsFavorite] = useState(false);\n\n  const groupId = 'laney';\n  const userId = 'andrew';\n\n  useEffect(() => {\n    console.log('userId', userId);\n    console.log('url', url);\n    // TODO - Fix url.url\n    fetch(`${FAVORITE_ENDPOINT}/${userId}/${url.url}`, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: 'GET',\n      mode: 'cors',\n    })\n      .then(res => res.json())\n      .then(data => console.log('SUCCESS', data))\n      .catch(err => console.log('ERROR', err));\n  }, [url]);\n\n  return (\n    <span onClick={() => favorite(url)}>Fav: <span>{isFavorite.toString()}</span></span>\n  );\n}\n\n// TODO - Rename, make it so it only allows an item in one section, and skip items if they're already in localStorage\nfunction useLocalStorage(name) {\n  const [array, setArray] = useState(JSON.parse(localStorage.getItem(name)) || []);\n\n  return item => {\n    const newArray = array.concat(item);\n    const jsonString = JSON.stringify(newArray);\n    localStorage.setItem(name, jsonString);\n    setArray(newArray);\n  };\n}\n\nfunction useS3(group) {\n  return url => {\n    console.log('recording group of', group, url);\n    fetch(GROUP_ENDPOINT, {\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      method: 'PUT',\n      mode: 'cors',\n      body: JSON.stringify({\n        group,\n        // TODO - Should rename url to something else\n        url,\n      })\n    })\n      .then(res => res.json())\n      .then(data => console.log('SUCCESS', data))\n      .catch(err => console.log('ERROR', err));\n\n  };\n}\n\nfunction Admin() {\n  const [index, setIndex] = useState(0);\n  const addToMain = useS3('main');\n  const addToSkip = useS3('skip');\n  const addToOther = useS3('other');\n\n  // TODO - Move this to a separate hook\n  const [videoList, setVideoList] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      /*\n      */\n\n      let response = await fetch('https://laneybug.s3.amazonaws.com/group/new/data.json');\n      let videoListJson = await response.json();\n      console.log('vidoelist.length', videoListJson.length);\n      setVideoList(videoListJson);\n    }\n    fetchData();\n  }, []);\n\n  if (!videoList.length) {\n    return null;\n  }\n\n  const main = () => {\n    addToMain(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const skip = () => {\n    addToSkip(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const back = () => {\n    setIndex(prev => prev - 1);\n  };\n  const other = () => {\n    addToOther(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const onKeyPress = event => {\n    console.log('keypress');\n    if (event.key === ' ') {\n      main();\n    } else if (event.key === 'o') {\n      other();\n    } else if (event.key === 'b') {\n      back();\n    }\n  };\n  const onError = (err, url) => {\n    if (err.type === 'error') {\n      skip();\n    }\n  };\n\n  return (\n    <div onKeyPress={onKeyPress}>\n      <div>{index} / {videoList.length}</div>\n      <div className=\"button-section\">\n        <button onClick={main}>LaneyBug</button>\n        <button onClick={skip}>Skip</button>\n        <button onClick={back}>Back</button>\n        <button onClick={other}>Other</button>\n      </div>\n      <ReactPlayer\n        url={`https://laneybug.s3.amazonaws.com/videos/${videoList[index]}`}\n        controls\n        loop\n        height=\"auto\"\n        width=\"auto\"\n        playing={true}\n        onError={err => onError(err, videoList[index])}\n        className=\"admin-player\"\n      />\n    </div>\n  );\n}\n\nfunction View({file}) {\n  const [videoList, setVideoList] = useState([]);\n  const {isSignedIn, googleUser} = useGoogleAuth();\n\n  useEffect(() => {\n    async function fetchData() {\n      // TODO - Make these requests parallel\n      const response = await fetch(file);\n      let list = await response.json();\n      if (isSignedIn && googleUser) {\n        try {\n          const previouslyViewed = await fetch(`https://laneybug.s3.amazonaws.com/events/${googleUser.profileObj.email}/view/summary.json`);\n          const previouslyViewedJson = await previouslyViewed.json();\n          const previouslyViewedJsonSet = new Set(previouslyViewedJson);\n          list = list.filter(vid => !previouslyViewedJsonSet.has(vid));\n        } catch(e) {\n          // TODO - Should log this so it's visible in AWS\n          console.log('Error occurred trying to fetch previously viewed videos', e);\n        }\n      }\n      setVideoList(list);\n    }\n    fetchData();\n  }, [file, isSignedIn, googleUser]);\n\n  if (!videoList.length) {\n    return null;\n  }\n\n  return <Player list={videoList} />;\n}\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/admin\">\n        <Admin />\n      </Route>\n      <Route path=\"/other\">\n        <View file=\"https://laneybug.s3.amazonaws.com/group/other/data.json\" />\n      </Route>\n      <Route path=\"/skip\">\n        <View file=\"https://laneybug.s3.amazonaws.com/group/skip/data.json\" />\n      </Route>\n      <Route path=\"/\">\n        <View file=\"https://laneybug.s3.amazonaws.com/group/main/data.json\" />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { GoogleAuthProvider } from './GoogleAuthProvider';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <GoogleAuthProvider>\n        <App />\n      </GoogleAuthProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}