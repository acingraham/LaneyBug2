{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Player","list","useState","selectedIndex","setSelectedIndex","rand","count","set","Set","size","length","randomIndex","Math","floor","random","add","Array","from","getRandom","items","setItems","className","onChange","showThumbs","useKeyboardArrows","showStatus","autoFocus","slice","map","url","index","controls","loop","height","width","playing","onError","err","type","newItems","indexOf","splice","View","file","videoList","setVideoList","useEffect","a","fetch","response","json","fetchData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAeA,SAASA,EAAT,GAAyB,IAARC,EAAO,EAAPA,KACf,EAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAZR,SAAmBJ,EAAMK,GAEvB,IADA,IAAMC,EAAM,IAAIC,IACTD,EAAIE,KAAOH,GAASA,EAAQL,EAAKS,QAAQ,CAC9C,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWb,EAAKS,QACpDH,EAAIQ,IAAId,EAAKU,IAEf,OAAOK,MAAMC,KAAKV,GAMLW,CAAUjB,EAAM,IAC7B,EAA0BC,mBAASG,GAAnC,mBAAOc,EAAP,KAAcC,EAAd,KAYA,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,WAAD,CAAUC,SAAUlB,EAAkBmB,YAAY,EAAOC,mBAAiB,EAACC,YAAY,EAAOC,WAAS,EAAvG,SACGP,EAAMQ,MAAM,EAAG,IAAIC,KAAI,SAACC,EAAKC,GAAN,OACtB,cAAC,IAAD,CAEED,IAAG,mDAA8CA,GACjDE,UAAQ,EACRC,MAAI,EACJC,OAAO,OACPC,MAAM,OACNC,QAASL,IAAU3B,EACnBiC,QAAS,SAAAC,GAAG,OAtBN,SAACA,EAAKR,GACH,UAAbQ,EAAIC,MACNlB,GAAS,SAAAD,GACP,IAAMoB,EAAQ,YAAOpB,GACfW,EAAQS,EAASC,QAAQX,GAE/B,OADAU,EAASE,OAAOX,EAAO,GAChBS,KAgBaH,CAAQC,EAAKR,KAPxBA,UAoHjB,SAASa,EAAT,GAAuB,IAARC,EAAO,EAAPA,KACb,EAAkCzC,mBAAS,IAA3C,mBAAO0C,EAAP,KAAkBC,EAAlB,KAWA,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAEyBC,MAAML,GAF/B,cAEQM,EAFR,gBAGqBA,EAASC,OAH9B,OAGQA,EAHR,OAIEL,EAAaK,GAJf,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACR,IAECC,EAAUlC,OAIR,cAACV,EAAD,CAAQC,KAAM2C,IAHZ,KAYIQ,MANf,WACE,OACE,cAACV,EAAD,CAAMC,KAAK,gBCjKAU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7326bed7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { Carousel } from 'react-responsive-carousel';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\nimport './App.css';\n\nfunction getRandom(list, count) {\n  const set = new Set();\n  while (set.size < count && count < list.length) {\n    const randomIndex = Math.floor(Math.random() * list.length);\n    set.add(list[randomIndex]);\n  }\n  return Array.from(set);\n}\n\nfunction Player({list}) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  // TODO - Handle bad urls better\n  const rand = getRandom(list, 20);\n  const [items, setItems] = useState(rand);\n\n  const onError = (err, url) => {\n    if (err.type === 'error') {\n      setItems(items => {\n        const newItems = [...items];\n        const index = newItems.indexOf(url);\n        newItems.splice(index, 1);\n        return newItems\n      });\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Carousel onChange={setSelectedIndex} showThumbs={false} useKeyboardArrows showStatus={false} autoFocus>\n        {items.slice(0, 10).map((url, index) => (\n          <ReactPlayer\n            key={url}\n            url={`https://laneybug.s3.amazonaws.com/videos/${url}`}\n            controls\n            loop\n            height=\"auto\"\n            width=\"auto\"\n            playing={index === selectedIndex}\n            onError={err => onError(err, url)}\n          />\n        ))}\n      </Carousel>\n    </div>\n  );\n}\n\n// TODO - Rename, make it so it only allows an item in one section, and skip items if they're already in localStorage\nfunction useLocalStorage(name) {\n  const [array, setArray] = useState(JSON.parse(localStorage.getItem(name)) || []);\n\n  return item => {\n    const newArray = array.concat(item);\n    const jsonString = JSON.stringify(newArray);\n    localStorage.setItem(name, jsonString);\n    setArray(newArray);\n  };\n}\n\nfunction Admin() {\n  const [index, setIndex] = useState(0);\n  const addToLaney = useLocalStorage('laney');\n  const addToSkip = useLocalStorage('skip');\n  const addToOther = useLocalStorage('other');\n\n  // TODO - Move this to a separate hook\n  const [videoList, setVideoList] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      let response = await fetch('videoList.json');\n      let videoListJson = await response.json();\n\n      response = await fetch('laney.json');\n      const laneyJson = await response.json();\n\n      response = await fetch('skip.json');\n      const skipJson = await response.json();\n\n      response = await fetch('other.json');\n      const otherJson = await response.json();\n\n      const processedVideos = laneyJson.concat(skipJson, otherJson);\n      const processedVideosSet = new Set(processedVideos);\n      videoListJson = videoListJson.filter(video => !processedVideosSet.has(video));\n\n      setVideoList(videoListJson);\n    }\n    fetchData();\n  }, []);\n\n  if (!videoList.length) {\n    return null;\n  }\n\n  const laneyBug = () => {\n    addToLaney(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const skip = () => {\n    addToSkip(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const back = () => {\n    setIndex(prev => prev - 1);\n  };\n  const other = () => {\n    addToOther(videoList[index]);\n    setIndex(prev => prev + 1);\n  };\n  const onKeyPress = event => {\n    console.log('keypress');\n    if (event.key === ' ') {\n      laneyBug();\n    } else if (event.key === 'o') {\n      other();\n    } else if (event.key === 'b') {\n      back();\n    }\n  };\n  const onError = (err, url) => {\n    if (err.type === 'error') {\n      skip();\n    }\n  };\n\n  return (\n    <div onKeyPress={onKeyPress}>\n      <div>{index} / {videoList.length}</div>\n      <div className=\"button-section\">\n        <button onClick={laneyBug}>LaneyBug</button>\n        <button onClick={skip}>Skip</button>\n        <button onClick={back}>Back</button>\n        <button onClick={other}>Other</button>\n      </div>\n      <ReactPlayer\n        url={`https://laneybug.s3.amazonaws.com/videos/${videoList[index]}`}\n        controls\n        loop\n        height=\"auto\"\n        width=\"auto\"\n        playing={true}\n        onError={err => onError(err, videoList[index])}\n        className=\"admin-player\"\n      />\n    </div>\n  );\n}\n\nfunction View({file}) {\n  const [videoList, setVideoList] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      // const response = await fetch('videoList.json');\n      const response = await fetch(file);\n      const json = await response.json();\n      setVideoList(json);\n    }\n    fetchData();\n  }, [file]);\n\n  if (!videoList.length) {\n    return null;\n  }\n\n  return <Player list={videoList} />;\n}\n\nfunction App() {\n  return (\n    <View file=\"laney.json\" />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}